			+--------------------+
			|       EEL 770      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

Victor Raposo victor.ravaglia@poli.ufrj.br
Mateus da Silva Gilbert <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

São referidas como alarmes as threads que requistaram a função de acordar em um determinado tempo.

Mebros novos:

/*struct thread*/
struct list_elem alarmelem;         /*Elemento referente a um alarme que devera ser acordado*/
int64_t tempo_acordar;              /* Tempo em ticks em que a thread devera ser acordada*/
struct list *alarmes;               /* Endereco para lista de alarmes*/



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

A thread que que chama a função passa a dormir e vai para uma lista encadeada e ordenada. A ordenação desta fila é feita levando em conta o tempo em que a thread correspondente deverá ser acordada.

A cada tick, o primeiro endereco da fila é checado para verificar se o tempo de espera da primeira thread ja foi alcancado. Se sim, ela é acordada, removida da fila e a seguinte thread é checada e assim sucessivamente.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Usando uma lista ordenada só é preciso fazer uma comparação por tick para saber se uma thread deve ser acordada.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Ambos evitados interrompendo interrupções quando a insercao na lista de prioridade é chamada.

---- RATIONALE ----

Para checagem de tempo passado com precisão de ticks é necessário checar a cada tick se 
uma das threads de alarme atingiu a contagem esperada. Para isso foi necessário escolher
uma thread que é executada a cada tick. Duas escolhas foram feitas para uma maior eficiência
do algorítimo:

Usar uma lista ordenada para agrupar os alarmes, deste modo a complexidade O(N) só acontece
quando um novo alarme é criado em vez de a cada tick. Isso possibilita checar apenas o primeiro
da fila e se ele for elegível checar o próximo e assim por diante liberando os alarmes.

Em vez de cada alarme ter seu próprio contador que deveria ser incrementado, quando criada,
cada thread de alarme calcula qual será o tempo do clock no momento em que deverá sair
da espera, reduzindo a complexidade de O(N) para O(1).

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/*struct thread*/
int prioridade_original;             /* Prioridade antes da doacao*/

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Sempre que uma thread entra na lista de prontas a inserção é feita
de maneira ordenada baseando-se na prioridade.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Primeiramente garantir que o scheduler sempre execute a thread com maior
prioridade, para isso a inserção na fila de prontas foi modificada para
ser ordenada.

Se uma thread criada tiver uma prioridade menor do que uma que está na fila
de espera ela deve dar yield.




			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/*struct thread*/
int nice;                           /* Valor de Nice (usado para mlfqs)*/
int recent_cpu;                     /* Tempo de cpu utilizado recentemente*/

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

Implemetar as funções em ponto fixo da maneira em que estão descritas
no documento.

Calculo de priority, load_avg e recent_cpu usando as funções em 
ponto fixo assim como descritas no documento.

A cada tick aumentar o recent_cpu em 1.
A cada segundo refazer os cálculos.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

As funções para cálculo em ponto fixo foram descritas no documento
e foram implementadas exatamente como descritas. Não foi necessário
criar um tipo específico mas é necessário atenção com as operações
sendo feitas já que ponto fixo ou inteiro ambos tem o mesmo tipo
na implementação (int) escolhida apesar de serem interpretedos de 
maneira diferente.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
